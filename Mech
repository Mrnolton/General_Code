using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Mech : MonoBehaviour {
    [SerializeField]
    private float moveSpeed = 3f;
    [SerializeField]
    private float jetpackForce = 90f;

    [SerializeField]
    private float rotationSpeed = 3f;


    [SerializeField]
    private float normalizeRotationSpeed = 3f;
    /*to make sure our Mech rotates back to original position */

    [SerializeField]
    private float boxLength;
    [SerializeField]
    private float boxHeight;
    [SerializeField]
    private Transform groundPosition;
    [SerializeField]
    private LayerMask groundLayer;
    /*layer mask to only consider the ground layer*/
    /*to determind if Mech is grounded*/


    private float moveInput;
    private bool isFlying = false;   
    /* ^ this is to say in case if the character is flying */

    private Collider2D[] isGrounded = new Collider2D[1];

    private Rigidbody2D rigidbody;

    
    
    
    
    private void Awake() {
        rigidbody = GetComponent<Rigidbody2D>();

    } 

    private void Update() {
        moveInput = Input.GetAxis("Horizontal");
        isFlying = Input.GetButton("Fire1");
        /* isFlying is called upon by pressing .Getbutton (fire1)
         (it has always been false until this action is called upon) */
    }



    private void FixedUpdate() {

        isGrounded[0] = null;
        Physics2D.OverlapBoxNonAlloc(groundPosition.position, new Vector2(boxLength, boxHeight), 0, isGrounded, groundLayer);

        if (isGrounded[0] && !isFlying)
        {
            /* if mech is grounded then it will only move in the left and right direction */
            rigidbody.velocity = new Vector2(moveInput * moveSpeed, rigidbody.velocity.y);
            rigidbody.freezeRotation = true;
        } else if (isFlying) {
            Vector3 rotation = new Vector3(0, 0, -moveInput * rotationSpeed);
            transform.Rotate(rotation);
            rigidbody.freezeRotation = false;            
            transform.rotation = Quaternion.Lerp(transform.rotation, Quaternion.identity, Time.deltaTime * normalizeRotationSpeed);
            rigidbody.AddForce(transform.rotation * Vector2.up * jetpackForce);


        }



        if (isFlying) {
        }
    
    
    
    }


    private void OnDrawGizmos() {
        Gizmos.color = Color.green;
        Gizmos.DrawWireCube(groundPosition.position, new Vector2(boxLength, boxHeight));

    
    
    
    
    }


}
